next()
} else if (is.na(df[time_col][i, ])) {
df[time_col][i, ] <- dt_defaults_dict['time']
}
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else if (dt_dict[time_col] == 'year' ) {
# if NA's not ignore, reasign to given defaults
if(ignore_dt_na) {
next()
} else if (is.na(df[time_col][i, ])) {
df[time_col][i, ] <- dt_defaults_dict['time']
}
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
print("ERROR: incorrect datetime type, options are 'time' 'day' 'month' 'year'")
}
}
}
return(df)
}
# here <- item_replace(d, 'RecTime', c("." = 1200))
here <- datetime_clean(d, c('RecTime' = 'time'))
View(here)
datetime_clean <- function(df,
dt_dict,
ignore_dt_na = TRUE,
dt_defaults_dict = c('time' = 1200, 'day' = 00, 'month' = 00, 'year' = 2000)
) {
# loop through every provided datetime_type
for (time_col in names(dt_dict)) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
if (dt_dict[time_col] == 'time') {
# if NA's not ignore, reasign to given defaults
if(ignore_dt_na) {
invisible()
} else if (is.na(df[time_col][i, ])) {
df[time_col][i, ] <- dt_defaults_dict['time']
}
browser()
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
print('before')
print(df[time_col][i, ])
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
print('after')
print(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else if (dt_dict[time_col] == 'day'| dt_dict[time_col] == 'month') {
# if NA's not ignore, reasign to given defaults
if(ignore_dt_na) {
next()
} else if (is.na(df[time_col][i, ])) {
df[time_col][i, ] <- dt_defaults_dict['time']
}
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else if (dt_dict[time_col] == 'year' ) {
# if NA's not ignore, reasign to given defaults
if(ignore_dt_na) {
next()
} else if (is.na(df[time_col][i, ])) {
df[time_col][i, ] <- dt_defaults_dict['time']
}
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
print("ERROR: incorrect datetime type, options are 'time' 'day' 'month' 'year'")
}
}
}
return(df)
}
# here <- item_replace(d, 'RecTime', c("." = 1200))
here <- datetime_clean(d, c('RecTime' = 'time'))
is.numeric(1)
df[time_col][i, ]
is.numeric(df[time_col][i, ])
is.numeric(strtoi(df[time_col][i, ]))
is.numeric(strtoi('goop'))
strtoi('goop')
is.numeric(NA)
is.numeric(strtoi('goop'))
# dt_dict: dictionary of form: c('datetime_column_name' = 'datetime_type')  'datetime_type' options: 'time' 'day' 'month' 'year'
# ignore_dt-na: allows you to skip NAs, # FALSE reassigns to default_dt
numbers_only <- function(x) !grepl("\\D", x)
numbers_only <- function(x) !grepl("\\D", x)
numbers_only('goop')
numbers_only('1234')
datetime_clean <- function(df,
dt_dict,
ignore_dt_na = TRUE,
dt_defaults_dict = c('time' = 1200, 'day' = 00, 'month' = 00, 'year' = 2000)
) {
# loop through every provided datetime_type
for (time_col in names(dt_dict)) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
if (dt_dict[time_col] == 'time') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['time']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
print('before')
print(df[time_col][i, ])
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
print('after')
print(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'day'| dt_dict[time_col] == 'month') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
if(dt_dict[time_col] == 'day'){
df[time_col][i, ] <- dt_defaults_dict['day']
} else {
df[time_col][i, ] <- dt_defaults_dict['month']
}
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'year' ) {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['day']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
invisible()
}
}
}
}
return(df)
}
datetime_clean <- function(df,
dt_dict,
ignore_dt_na = TRUE,
dt_defaults_dict = c('time' = 1200, 'day' = 00, 'month' = 00, 'year' = 2000)
) {
# loop through every provided datetime_type
for (time_col in names(dt_dict)) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
if (dt_dict[time_col] == 'time') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['time']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
print('before')
print(df[time_col][i, ])
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
print('after')
print(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'day'| dt_dict[time_col] == 'month') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
if(dt_dict[time_col] == 'day'){
df[time_col][i, ] <- dt_defaults_dict['day']
} else {
df[time_col][i, ] <- dt_defaults_dict['month']
}
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'year' ) {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['day']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
invisible()
}
}
}
}
return(df)
}
# here <- item_replace(d, 'RecTime', c("." = 1200))
here <- datetime_clean(d, c('RecTime' = 'time'))
# dt_dict: dictionary of form: c('datetime_column_name' = 'datetime_type')  'datetime_type' options: 'time' 'day' 'month' 'year'
# ignore_dt-na: allows you to skip NAs, # FALSE reassigns to default_dt
numbers_only <- function(x) !grepl("\\D", x)
datetime_clean <- function(df,
dt_dict,
ignore_dt_na = TRUE,
dt_defaults_dict = c('time' = 1200, 'day' = 00, 'month' = 00, 'year' = 2000)
) {
# loop through every provided datetime_type
for (time_col in names(dt_dict)) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
if (dt_dict[time_col] == 'time') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['time']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
print('before')
print(df[time_col][i, ])
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
print('after')
print(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'day'| dt_dict[time_col] == 'month') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
if(dt_dict[time_col] == 'day'){
df[time_col][i, ] <- dt_defaults_dict['day']
} else {
df[time_col][i, ] <- dt_defaults_dict['month']
}
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'year' ) {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['day']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
invisible()
}
}
}
}
return(df)
}
# here <- item_replace(d, 'RecTime', c("." = 1200))
here <- datetime_clean(d, c('RecTime' = 'time'))
View(here)
datetime_clean <- function(df,
dt_dict,
ignore_dt_na = TRUE,
dt_defaults_dict = c('time' = 1200, 'day' = 00, 'month' = 00, 'year' = 2000)
) {
# loop through every provided datetime_type
for (time_col in names(dt_dict)) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
if (dt_dict[time_col] == 'time') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
print("GOOBLEDYGOOK")
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['time']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'day'| dt_dict[time_col] == 'month') {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
if(dt_dict[time_col] == 'day'){
df[time_col][i, ] <- dt_defaults_dict['day']
} else {
df[time_col][i, ] <- dt_defaults_dict['month']
}
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else {
invisible()
}
} else if (dt_dict[time_col] == 'year' ) {
# skip/change NAs
if(is.na(df[time_col][i, ])) {
if(ignore_dt_na) {
invisible()
} else {
df[time_col][i, ] <- dt_defaults_dict['day']
}
# only perform time ops on numerics
} else if(numbers_only(df[time_col][i, ])){
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
invisible()
}
}
}
}
return(df)
}
# here <- item_replace(d, 'RecTime', c("." = 1200))
here <- datetime_clean(d, c('RecTime' = 'time'))
here <- item_replace(d, 'RecTime', c("." = NA))
here <- datetime_clean(here, c('RecTime' = 'time'))
here <- item_replace(d, 'RecTime', c("." = NA))
View(here)
# should we incorporate this permanently into the f(x)?
d <- read.csv(rawfile1,
colClasses = 'character',
quote = '')
here <- item_replace(d, 'RecTime', c("." = NA))
View(here)
View(here)
here <- datetime_clean(here, c('RecTime' = 'time'))
View(here)
here <- datetime_clean(here, c('RecTime' = 'time'), ignore_dt_na = FALSE)
