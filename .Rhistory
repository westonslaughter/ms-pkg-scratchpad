}
# if it is equal to replace_value
} else if (df[time_col][i, ] %in% replace_value) {
# replace with the default
df[time_col][i, ] <- default_dt
# if the default time is midnight
} else if (default_dt == 1200) {
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
}
}
}
return(df)
}
# should we incorporate this permanently into the f(x)?
d <- read.csv(rawfile1,
colClasses = 'character',
quote = '')
here <- time_clean(d, 'RecTime')
View(here)
item_replace <- function(df,
rpl_cols,
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
replace_dict,
# FALSE skip NAs
# if true, replace with
# na_replacer value
ignore_na = TRUE,
na_replacer = FALSE,
) {
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
cols(d)
cols(here)
names(d)
here <- item_replace(d, names(d), c("." == "1200"))
item_replace <- function(df,
rpl_cols,
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
replace_dict,
# FALSE skip NAs
# if true, replace with
# na_replacer value
ignore_na = TRUE,
na_replacer = FALSE,
) {
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
here <- item_replace(d, names(d), c("." == "1200"))
here <- time_clean(d, 'RecTime', '.')
here <- time_clean(d, 'RecTime', '.')
View(here)
here <- time_clean(d, 'RecTime', ".")
here <- time_clean(d, 'RecTime', replace_value = ".")
item_replace <- function(df, rpl_cols, replace_dict,   ignore_na = TRUE,  na_replacer = FALSE,
) {
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
# FALSE skip NAs
# if true, replace with
# na_replacer value
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
item_replace <- function(df, rpl_cols, replace_dict,   ignore_na = TRUE,  na_replacer = FALSE) {
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
# FALSE skip NAs
# if true, replace with
# na_replacer value
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
here <- item_replace(d, names(d), c("." == "1200"))
item_replace <- function(df, rpl_cols, replace_dict,   ignore_na = TRUE,  na_replacer = FALSE) {
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
# FALSE skip NAs
# if true, replace with
# na_replacer value
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
print(df[col])
print("got to this kevel")
break()
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
here <- item_replace(d, names(d), c("." == "1200"))
item_replace <- function(df, rpl_cols, replace_dict,   ignore_na = TRUE,  na_replacer = FALSE) {
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
# FALSE skip NAs
# if true, replace with
# na_replacer value
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
print(replace_dict[df[col][i, ]])
print("GADZOOKS")
break()
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
here <- item_replace(d, names(d), c("." == "1200"))
here <- item_replace(d, names(d), c("." = "1200"))
item_replace <- function(df, rpl_cols, replace_dict,   ignore_na = TRUE,  na_replacer = FALSE) {
# dictionary of strings and
# replacements, of format
# c("old.string" = "new.string",
#   "other.old.string" = "other.new.string")
# FALSE skip NAs
# if true, replace with
# na_replacer value
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
here <- item_replace(d, names(d), c("." = "1200"))
l
l
l
library(glue)
library(lubridate)
library(errors)
library(data.table)
library(feather)
ms_vars <- read_csv('data/variables.csv')
site_data <- read_csv('data/site_data.csv')
source('src/helpers.R')
network <- 'lter'
domain <- 'konza'
prodname_ms <- 'stream_chemistry__50'
site_code <- 'sitename_NA'
component <- 'NWC011'
is_spatial <- FALSE
rawfile1 = glue('data/{n}/{d}/raw/{p}/{s}/{c}.csv',
n = network,
d = domain,
p = prodname_ms,
s = site_code,
c = component)
# should we incorporate this permanently into the f(x)?
d <- read.csv(rawfile1,
colClasses = 'character',
quote = '')
item_replace <- function(df,
rpl_cols,
replace_dict,
ignore_na = TRUE,
na_replacer = FALSE
) {
# loop through every time value
for (col in rpl_cols) {
for(i in 1:nrow(df[col])) {
# if it is NA
if (is.na(df[col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[col][i, ] <- na_replacer
}
# if it is equal to replace_value
} else if (df[col][i, ] %in% names(replace_dict)) {
# replace with the default
df[col][i, ] <- replace_dict[df[col][i, ]]
# if the default time is midnight
}
}
}
return(df)
}
time_clean <- function(df,
time_col,
default_dt = 1200,
# allows you to skip NAs,
# FALSE reassigns to default_dt
ignore_na = FALSE,
# allows user to specify other values to
# reassign to default_dt, can be single
# or vector
replace_value = FALSE
) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
# if it is NA
if (is.na(df[time_col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[time_col][i, ] <- default_dt
}
# if it is equal to replace_value
} else if (df[time_col][i, ] %in% replace_value) {
# replace with the default
df[time_col][i, ] <- default_dt
# if the default time is midnight
} else if (default_dt == 1200) {
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
}
}
}
return(df)
}
datetime_clean <- function(df,
time_col,
default_dt = 1200,
# allows you to skip NAs,
# FALSE reassigns to default_dt
ignore_na = FALSE,
# allows user to specify other values to
# reassign to default_dt, can be single
# or vector
replace_value = FALSE,
# options: 'time' 'day' 'month' 'year'
dt_type = 'time'
) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
# if it is NA
if (is.na(df[time_col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[time_col][i, ] <- default_dt
}
# if it is equal to replace_value
} else if (df[time_col][i, ] %in% replace_value) {
# replace with the default
df[time_col][i, ] <- default_dt
# if the default time is midnight
} else if (dt_type == 'time') {
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else if (dt_type == 'day'| dt_type == 'month') {
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else if (dt_type == 'year' ) {
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
print("ERROR: incorrect datetime type, options are 'time' 'day' 'month' 'year'")
}
}
return(df)
}
View(d)
# here <- item_replace(d, names(d), c("." = "1200"))
#
here <- time_clean(d, 'RecTime', replace_value = ".")
View(here)
here <- time_clean(d, 'RecDay', dt_type = 'day')
datetime_clean <- function(df,
time_col,
default_dt = 1200,
# allows you to skip NAs,
# FALSE reassigns to default_dt
ignore_na = FALSE,
# allows user to specify other values to
# reassign to default_dt, can be single
# or vector
replace_value = FALSE,
# options: 'time' 'day' 'month' 'year'
dt_type = 'time'
) {
# loop through every time value
for(i in 1:nrow(df[time_col])) {
# if it is NA
if (is.na(df[time_col][i, ])) {
# pass if ignore_na is TRUE
if (ignore_na) {
next()
# replace with default time if FALSE
} else {
df[time_col][i, ] <- default_dt
}
# if it is equal to replace_value
} else if (df[time_col][i, ] %in% replace_value) {
# replace with the default
df[time_col][i, ] <- default_dt
# if the default time is midnight
} else if (dt_type == 'time') {
# make sure that all entries have 4 digits
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(000, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(00, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the time column")
}
} else if (dt_type == 'day'| dt_type == 'month') {
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(0, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 2) {
print("ERROR: greater than 2 character entry in the month column")
}
} else if (dt_type == 'year' ) {
if(nchar(df[time_col][i, ]) == 1) {
df[time_col][i, ] <- paste0(200, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 2) {
df[time_col][i, ] <- paste0(20, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 3) {
df[time_col][i, ] <- paste0(2, df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) == 4) {
df[time_col][i, ] <- as.character(df[time_col][i, ])
} else if(nchar(df[time_col][i, ]) > 4) {
print("ERROR: greater than 4 character entry in the year column")
}
} else {
print("ERROR: incorrect datetime type, options are 'time' 'day' 'month' 'year'")
}
}
return(df)
}
# here <- item_replace(d, names(d), c("." = "1200"))
#
here <- datetime_clean(d, 'RecTime', replace_value = ".")
here <- datetime_clean(d, 'RecDay', dt_type = 'day')
